// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Domain;

#nullable disable

namespace Colegio1258.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231118235752_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Alumno", b =>
                {
                    b.Property<int>("IdAlumno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlumno"));

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoEstudiante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoModular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EscolaridadMadre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Grado")
                        .HasColumnType("int");

                    b.Property<int?>("HorasLabora")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int");

                    b.Property<string>("LenguaMaterna")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MadreVive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreRjrd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PadreVive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SegundaLengua")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SituacionMatricula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDiscapacidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrabajaEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValidadoReniec")
                        .HasColumnType("int");

                    b.HasKey("IdAlumno");

                    b.ToTable("Alumno");
                });

            modelBuilder.Entity("Models.AlumnoComportamiento", b =>
                {
                    b.Property<int>("IdAlumnoComportamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlumnoComportamiento"));

                    b.Property<int>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int>("IdAlumnoNavigationIdAlumno")
                        .HasColumnType("int");

                    b.Property<int>("IdComportamiento")
                        .HasColumnType("int");

                    b.Property<int>("IdComportamientoNavigationIdComportamiento")
                        .HasColumnType("int");

                    b.HasKey("IdAlumnoComportamiento");

                    b.HasIndex("IdAlumnoNavigationIdAlumno");

                    b.HasIndex("IdComportamientoNavigationIdComportamiento");

                    b.ToTable("AlumnoComportamiento");
                });

            modelBuilder.Entity("Models.Asistencia", b =>
                {
                    b.Property<int>("IdAsistencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsistencia"));

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int?>("IdAlumnoNavigationIdAlumno")
                        .HasColumnType("int");

                    b.Property<string>("UserCreacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAsistencia");

                    b.HasIndex("IdAlumnoNavigationIdAlumno");

                    b.ToTable("Asistencia");
                });

            modelBuilder.Entity("Models.Comportamiento", b =>
                {
                    b.Property<int>("IdComportamiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComportamiento"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaIncidencia")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInforme")
                        .HasColumnType("int");

                    b.Property<int>("IdInformeNavigationIdInforme")
                        .HasColumnType("int");

                    b.Property<string>("MedidasCorrectivas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("IdComportamiento");

                    b.HasIndex("IdInformeNavigationIdInforme");

                    b.ToTable("Comportamiento");
                });

            modelBuilder.Entity("Models.Compromiso", b =>
                {
                    b.Property<int>("IdCompromiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompromiso"));

                    b.Property<string>("Compromisos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCompromiso")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdInforme")
                        .HasColumnType("int");

                    b.Property<int?>("IdInformeNavigationIdInforme")
                        .HasColumnType("int");

                    b.HasKey("IdCompromiso");

                    b.HasIndex("IdInformeNavigationIdInforme");

                    b.ToTable("Compromiso");
                });

            modelBuilder.Entity("Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Models.Informe", b =>
                {
                    b.Property<int>("IdInforme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInforme"));

                    b.Property<string>("ClasificacionAi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComentarioDirector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoInforme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdPersonal")
                        .HasColumnType("int");

                    b.Property<int>("IdPersonalNavigationIdPersonal")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Mes")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Trimestre")
                        .HasColumnType("int");

                    b.HasKey("IdInforme");

                    b.HasIndex("IdPersonalNavigationIdPersonal");

                    b.ToTable("Informe");
                });

            modelBuilder.Entity("Models.Nota", b =>
                {
                    b.Property<int>("IdNota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNota"));

                    b.Property<string>("AreaCurricular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cal1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cal2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cal3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalAnual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Competencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grado")
                        .HasColumnType("int");

                    b.Property<int?>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int?>("IdAlumnoNavigationIdAlumno")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int");

                    b.Property<string>("Seccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNota");

                    b.HasIndex("IdAlumnoNavigationIdAlumno");

                    b.ToTable("Nota");
                });

            modelBuilder.Entity("Models.Padre", b =>
                {
                    b.Property<int>("IdPadre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPadre"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int?>("IdAlumnoNavigationIdAlumno")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parentesco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidadoReniec")
                        .HasColumnType("int");

                    b.HasKey("IdPadre");

                    b.HasIndex("IdAlumnoNavigationIdAlumno");

                    b.ToTable("Padre");
                });

            modelBuilder.Entity("Models.PadreReunion", b =>
                {
                    b.Property<int>("IdPadreReunion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPadreReunion"));

                    b.Property<string>("FirmaLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdCompromiso")
                        .HasColumnType("int");

                    b.Property<int?>("IdCompromisoNavigationIdCompromiso")
                        .HasColumnType("int");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int");

                    b.Property<int?>("IdPadreNavigationIdPadre")
                        .HasColumnType("int");

                    b.Property<int?>("IdReunion")
                        .HasColumnType("int");

                    b.Property<int?>("IdReunionNavigationIdReunion")
                        .HasColumnType("int");

                    b.HasKey("IdPadreReunion");

                    b.HasIndex("IdCompromisoNavigationIdCompromiso");

                    b.HasIndex("IdPadreNavigationIdPadre");

                    b.HasIndex("IdReunionNavigationIdReunion");

                    b.ToTable("PadreReunion");
                });

            modelBuilder.Entity("Models.PersonalEducativo", b =>
                {
                    b.Property<int>("IdPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonal"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Grado")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUsuarioNavigationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rol")
                        .HasColumnType("int");

                    b.Property<string>("Seccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModificacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPersonal");

                    b.HasIndex("IdUsuarioNavigationId");

                    b.ToTable("PersonalEducativo");
                });

            modelBuilder.Entity("Models.Reunion", b =>
                {
                    b.Property<int>("IdReunion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReunion"));

                    b.Property<string>("Acuerdos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Agenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Conformidad")
                        .HasColumnType("int");

                    b.Property<int?>("Entrega")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaReunion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirmaronPadres")
                        .HasColumnType("int");

                    b.Property<int?>("IdInforme")
                        .HasColumnType("int");

                    b.Property<int?>("IdInformeNavigationIdInforme")
                        .HasColumnType("int");

                    b.Property<string>("TipoReunion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReunion");

                    b.HasIndex("IdInformeNavigationIdInforme");

                    b.ToTable("Reunion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.AlumnoComportamiento", b =>
                {
                    b.HasOne("Models.Alumno", "IdAlumnoNavigation")
                        .WithMany("AlumnoComportamientos")
                        .HasForeignKey("IdAlumnoNavigationIdAlumno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Comportamiento", "IdComportamientoNavigation")
                        .WithMany("AlumnoComportamientos")
                        .HasForeignKey("IdComportamientoNavigationIdComportamiento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAlumnoNavigation");

                    b.Navigation("IdComportamientoNavigation");
                });

            modelBuilder.Entity("Models.Asistencia", b =>
                {
                    b.HasOne("Models.Alumno", "IdAlumnoNavigation")
                        .WithMany("Asistencia")
                        .HasForeignKey("IdAlumnoNavigationIdAlumno");

                    b.Navigation("IdAlumnoNavigation");
                });

            modelBuilder.Entity("Models.Comportamiento", b =>
                {
                    b.HasOne("Models.Informe", "IdInformeNavigation")
                        .WithMany("Comportamientos")
                        .HasForeignKey("IdInformeNavigationIdInforme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdInformeNavigation");
                });

            modelBuilder.Entity("Models.Compromiso", b =>
                {
                    b.HasOne("Models.Informe", "IdInformeNavigation")
                        .WithMany("Compromisos")
                        .HasForeignKey("IdInformeNavigationIdInforme");

                    b.Navigation("IdInformeNavigation");
                });

            modelBuilder.Entity("Models.Informe", b =>
                {
                    b.HasOne("Models.PersonalEducativo", "IdPersonalNavigation")
                        .WithMany("Informes")
                        .HasForeignKey("IdPersonalNavigationIdPersonal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPersonalNavigation");
                });

            modelBuilder.Entity("Models.Nota", b =>
                {
                    b.HasOne("Models.Alumno", "IdAlumnoNavigation")
                        .WithMany("Nota")
                        .HasForeignKey("IdAlumnoNavigationIdAlumno");

                    b.Navigation("IdAlumnoNavigation");
                });

            modelBuilder.Entity("Models.Padre", b =>
                {
                    b.HasOne("Models.Alumno", "IdAlumnoNavigation")
                        .WithMany("Padres")
                        .HasForeignKey("IdAlumnoNavigationIdAlumno");

                    b.Navigation("IdAlumnoNavigation");
                });

            modelBuilder.Entity("Models.PadreReunion", b =>
                {
                    b.HasOne("Models.Compromiso", "IdCompromisoNavigation")
                        .WithMany("PadreReunions")
                        .HasForeignKey("IdCompromisoNavigationIdCompromiso");

                    b.HasOne("Models.Padre", "IdPadreNavigation")
                        .WithMany("PadreReunions")
                        .HasForeignKey("IdPadreNavigationIdPadre");

                    b.HasOne("Models.Reunion", "IdReunionNavigation")
                        .WithMany("PadreReunions")
                        .HasForeignKey("IdReunionNavigationIdReunion");

                    b.Navigation("IdCompromisoNavigation");

                    b.Navigation("IdPadreNavigation");

                    b.Navigation("IdReunionNavigation");
                });

            modelBuilder.Entity("Models.PersonalEducativo", b =>
                {
                    b.HasOne("Models.Domain.ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("PersonalEducativos")
                        .HasForeignKey("IdUsuarioNavigationId");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("Models.Reunion", b =>
                {
                    b.HasOne("Models.Informe", "IdInformeNavigation")
                        .WithMany("Reunions")
                        .HasForeignKey("IdInformeNavigationIdInforme");

                    b.Navigation("IdInformeNavigation");
                });

            modelBuilder.Entity("Models.Alumno", b =>
                {
                    b.Navigation("AlumnoComportamientos");

                    b.Navigation("Asistencia");

                    b.Navigation("Nota");

                    b.Navigation("Padres");
                });

            modelBuilder.Entity("Models.Comportamiento", b =>
                {
                    b.Navigation("AlumnoComportamientos");
                });

            modelBuilder.Entity("Models.Compromiso", b =>
                {
                    b.Navigation("PadreReunions");
                });

            modelBuilder.Entity("Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("PersonalEducativos");
                });

            modelBuilder.Entity("Models.Informe", b =>
                {
                    b.Navigation("Comportamientos");

                    b.Navigation("Compromisos");

                    b.Navigation("Reunions");
                });

            modelBuilder.Entity("Models.Padre", b =>
                {
                    b.Navigation("PadreReunions");
                });

            modelBuilder.Entity("Models.PersonalEducativo", b =>
                {
                    b.Navigation("Informes");
                });

            modelBuilder.Entity("Models.Reunion", b =>
                {
                    b.Navigation("PadreReunions");
                });
#pragma warning restore 612, 618
        }
    }
}
